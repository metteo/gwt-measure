--- Implemented ---
+ GWT 2.1.1 support
+ Apache 2.0 License
+ integration with lightweight measurements
+ gwt event handler on client for easy plugins
+ measurements of Callbacks
+ measurements of RPC
+ support custom event attributes (fragment, size, bytes, method, sessionId)
+ slf4j on server
+ handle browser close and navigate to different url

--- In Progress ---
# pluggable server implementations
# measurements groups
# measuring static resource download
# support RunAsync measurements (fragment, size - attributes are new)
# retry sequence of measurement delivery
# exception reporting
# callback failure identification
# messages in json format
# network calculation
# uid injection with filter or remote servlet
# configurable measurement transport (direct rpc, servlet, rpc piggyback, servlet piggyback, custom)
# split client and server distributions
# honor HTTP header limitations
# disabling/enabling features
# mention gwt-debug-panel in documentation

--- Next Versions ---
# offline storage of incidents on client until browser is connected
# exception diagnostics and categorization
# logging mechanism (div, firebug, chrome, etc. see gwt-log example)
# nested custom measurements
# measurements of HTTP Requests
# measurements of Timers
# measurements of RequestFactory
# measurements of EntryPoints
# native js support (somehow)
# resource bundle support
# use HTML5 browser storage and cookies on older browsers
# gwt logging on client
# aspect-like proxy generation
# async storage on server not to stall the production

----- Planned -----
# Google App Engine integration
# browser recognition
# ip geomapping
# sample reporting over the embedded database
# google chart api for reporting
# JMX reporting and configuration support
# reporting tooling
# GWT 2.2 support
# Migrate to Java 1.6 and use SPI feature